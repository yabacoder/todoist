{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { firebase } from '../firebase';\nimport { collatedTasksExist } from '../helpers';\nimport { moment } from 'moment'; // const collatedTasksExist = () => {}\n\nexport const useTasks = selectedProject => {\n  _s();\n\n  const [tasks, setTasks] = useState([]);\n  const [archivedTasks, setArchivedTasks] = useState([]);\n  useEffect(() => {\n    let unsubscribe = firebase.firestore().collection('tasks').where('userId', '==', '123456');\n    unsubscribe = selectedProject && !collatedTasksExist(selectedProject) ? unsubscribe = unsubscribe.where('projectId', '==', selectedProject) : selectedProject === 'TODAY' ? unsubscribe = unsubscribe.where('date', '==', moment().format('DD/MM/YYYY')) : selectedProject === 'INBOX' || selectedProject === 0 ? unsubscribe = unsubscribe.where('date', '==', '') : unsubscribe;\n    unsubscribe = unsubscribe.onSnapshot(snapshot => {\n      const newTasks = snapshot.docs.map(task => ({\n        id: task.id,\n        ...task.data()\n      }));\n      setTasks(selectedProject === 'NEXT_7' ? newTasks.filter(task => moment(task.date, 'DD-MM-YYY').diff(moment(), 'days') <= 7 && task.archived !== true) : newTasks.filter(task => task.archived !== true));\n      setArchivedTasks(newTasks.filter(task => task.archived !== false));\n    });\n    return () => unsubscribe();\n  }, [selectedProject]);\n  return {\n    tasks,\n    archivedTasks\n  };\n};\n\n_s(useTasks, \"lkbYbSuB/cNTkTVEXjLheUMZ+l8=\");\n\nexport const useProjects = () => {\n  _s2();\n\n  const [projects, setProjects] = useState([]);\n  useEffect(() => {\n    firebase.firestore().collection('projects').where('userId', '==', '123456').orderBy('projectId').get().then(snapshot => {\n      const allProjects = snapshot.docs.map(project => ({ ...project.data(),\n        docId: project.id\n      }));\n\n      if (JSON.stringify(allProjects) !== JSON.stringify(projects)) {\n        setProjects(allProjects);\n      }\n    });\n  }, [projects]);\n  return {\n    projects,\n    setProjects\n  };\n};\n\n_s2(useProjects, \"TSrpuQX6QU8EgjQSxaAzj2u9i4o=\");","map":{"version":3,"sources":["/Applications/MAMP/htdocs/projects/react/todoist/src/hooks/index.js"],"names":["useState","useEffect","firebase","collatedTasksExist","moment","useTasks","selectedProject","tasks","setTasks","archivedTasks","setArchivedTasks","unsubscribe","firestore","collection","where","format","onSnapshot","snapshot","newTasks","docs","map","task","id","data","filter","date","diff","archived","useProjects","projects","setProjects","orderBy","get","then","allProjects","project","docId","JSON","stringify"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport { firebase } from '../firebase';\nimport { collatedTasksExist } from '../helpers';\nimport { moment} from 'moment'\n\n// const collatedTasksExist = () => {}\n\nexport const useTasks = selectedProject => {\n    const [tasks, setTasks] = useState([]);\n    const [archivedTasks, setArchivedTasks] = useState([]);\n\n    useEffect(() => {\n        let unsubscribe = firebase.firestore().collection('tasks').where('userId', '==', '123456');\n\n        unsubscribe = selectedProject && !collatedTasksExist(selectedProject) ?\n        (unsubscribe = unsubscribe.where('projectId', '==', selectedProject))\n        : selectedProject === 'TODAY'\n        ? (unsubscribe = unsubscribe.where(\n            'date',\n            '==',\n            moment().format('DD/MM/YYYY')\n        ))\n        : selectedProject === 'INBOX' || selectedProject === 0\n        ? (unsubscribe = unsubscribe.where('date', '==', ''))\n        : unsubscribe;\n\n        unsubscribe = unsubscribe.onSnapshot(snapshot => {\n            const newTasks = snapshot.docs.map(task => ({\n                id: task.id,\n                ...task.data()\n            }));\n\n            setTasks( \n                selectedProject === 'NEXT_7'\n                    ? newTasks.filter(\n                        task =>\n                            moment(task.date, 'DD-MM-YYY').diff(moment(), 'days') <= 7 &&\n                            task.archived !== true\n                        )\n                    : newTasks.filter(task => task.archived !== true)\n                );\n            setArchivedTasks(newTasks.filter(task => task.archived !== false))\n        });\n\n        return () => unsubscribe();\n\n\n    }, [selectedProject]);\n\n    return { tasks, archivedTasks}\n};\n\nexport const useProjects = () => {\n    const [projects, setProjects] = useState([]);\n\n    useEffect(() => {\n        firebase\n            .firestore()\n            .collection('projects')\n            .where('userId', '==', '123456')\n            .orderBy('projectId')\n            .get()\n            .then(snapshot => {\n                const allProjects = snapshot.docs.map(project => ({\n                    ...project.data(),\n                    docId: project.id,\n                }));\n\n                if (JSON.stringify(allProjects) !== JSON.stringify(projects)) {\n                    setProjects(allProjects)\n                }\n            });\n    }, [projects]);\n\n    return { projects, setProjects };\n};"]},"metadata":{},"sourceType":"module"}